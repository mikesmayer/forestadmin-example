'use strict';

var P = require('bluebird');
var ForestServerRequester = require('./forest-server-requester');
var moment = require('moment');
var VError = require('verror');

var permissions = void 0;
var lastRetrieve = void 0;

function PermissionsChecker(environmentSecret, collectionName, permissionName) {
  var EXPIRATION_IN_SECONDS = process.env.FOREST_PERMISSIONS_EXPIRATION_IN_SECONDS || 3600;

  function isAllowed() {
    if (!permissions || !permissions[collectionName] || !permissions[collectionName].collection) {
      return false;
    }

    return permissions[collectionName].collection[permissionName];
  }

  function retrievePermissions() {
    return new ForestServerRequester().perform('/liana/v1/permissions', environmentSecret).then(function (responseBody) {
      permissions = responseBody;
      lastRetrieve = moment();
    }).catch(function (error) {
      return P.reject(new VError(error, 'Permissions error'));
    });
  }

  function isPermissionExpired() {
    var currentTime = moment();

    if (!lastRetrieve) {
      return true;
    }

    var elapsedSeconds = currentTime.diff(lastRetrieve, 'seconds');

    return elapsedSeconds >= EXPIRATION_IN_SECONDS;
  }

  function retrievePermissionsAndCheckAllowed(resolve, reject) {
    return retrievePermissions().then(function () {
      return isAllowed() ? resolve() : reject(new Error('\'' + permissionName + '\' access forbidden on ' + collectionName));
    }).catch(reject);
  }

  this.perform = function () {
    return new P(function (resolve, reject) {
      if (isPermissionExpired()) {
        return retrievePermissionsAndCheckAllowed(resolve, reject);
      }

      if (!isAllowed(collectionName, permissionName)) {
        return retrievePermissionsAndCheckAllowed(resolve, reject);
      }

      return resolve();
    });
  };
}

PermissionsChecker.cleanCache = function () {
  permissions = null;
};

PermissionsChecker.resetExpiration = function () {
  lastRetrieve = null;
};

PermissionsChecker.getLastRetrieveTime = function () {
  return lastRetrieve;
};

PermissionsChecker.getPermissions = function () {
  return permissions;
};

module.exports = PermissionsChecker;
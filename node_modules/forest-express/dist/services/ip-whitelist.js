'use strict';

var errorMessages = require('../utils/error-messages');
var ipUtil = require('ip-utils');
var P = require('bluebird');
var _ = require('lodash');
var ForestServerRequester = require('./forest-server-requester');
var VError = require('verror');
var IpWhitelistDeserializer = require('../deserializers/ip-whitelist');

var ipWhitelistRules = null;
var useIpWhitelist = true;

function retrieve(environmentSecret) {
  return new ForestServerRequester().perform('/liana/v1/ip-whitelist-rules', environmentSecret).then(function (responseBody) {
    if (responseBody.data) {
      return new IpWhitelistDeserializer(responseBody.data).perform();
    } else {
      return P.reject(new Error('IP Whitelist: ' + errorMessages.SERVER_TRANSACTION.UNEXPECTED));
    }
  }).then(function (ipWhitelistData) {
    useIpWhitelist = ipWhitelistData.useIpWhitelist;
    ipWhitelistRules = ipWhitelistData.rules;
  }).catch(function (error) {
    return P.reject(new VError(error, 'IP Whitelist error'));
  });
}

function isIpWhitelistRetrieved() {
  return !useIpWhitelist || ipWhitelistRules !== null;
}

function isIpValid(ip) {
  if (useIpWhitelist) {
    return _.some(ipWhitelistRules, function (rule) {
      return ipUtil.isIpMatchesRule(ip, rule);
    });
  }

  return true;
}

module.exports = {
  retrieve: retrieve,
  isIpValid: isIpValid,
  isIpWhitelistRetrieved: isIpWhitelistRetrieved
};